{"title":"一些开箱即用碰撞检测！AABB","uid":"4ee9f7f9db66a32f6be01c9f693942e5","slug":"一些包围盒类碰撞检测算法","date":"2024-05-27T16:00:00.000Z","updated":"2024-05-27T16:00:00.000Z","comments":true,"path":"api/articles/一些包围盒类碰撞检测算法.json","keywords":null,"cover":null,"content":"<p>听说有群友已经不满足于，大V老师提供的简单检测方法了，那么让我们为自己的游戏增加更多有趣的碰撞检测罢！<br>全文采用AABB实现，包含矩矩，圆圆，矩圆，角度矩圆，椭圆，点矩，点环，点圆，点椭，等，必要情况下只要根据下文中的算法自行修改或嵌套使用即可！</p>\n<span id=\"more\"></span>\n<h2 id=\"在下文中，大家可能会发现，为什么没有旋转过的两个矩形的碰撞，那不是AABB了，未来在说。\"><a href=\"#在下文中，大家可能会发现，为什么没有旋转过的两个矩形的碰撞，那不是AABB了，未来在说。\" class=\"headerlink\" title=\"在下文中，大家可能会发现，为什么没有旋转过的两个矩形的碰撞，那不是AABB了，未来在说。\"></a>在下文中，大家可能会发现，为什么没有旋转过的两个矩形的碰撞，那不是AABB了，未来在说。</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 定义一个结构体，表示二维空间中的点</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Point_F</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">double</span> x; <span class=\"comment\">// 点的x坐标</span></span><br><span class=\"line\">    <span class=\"type\">double</span> y; <span class=\"comment\">// 点的y坐标</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 定义一个结构体，表示矩形区域</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">RECT</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">double</span> left;   <span class=\"comment\">// 矩形左边缘的x坐标</span></span><br><span class=\"line\">    <span class=\"type\">double</span> top;    <span class=\"comment\">// 矩形上边缘的y坐标</span></span><br><span class=\"line\">    <span class=\"type\">double</span> right;  <span class=\"comment\">// 矩形右边缘的x坐标</span></span><br><span class=\"line\">    <span class=\"type\">double</span> bottom; <span class=\"comment\">// 矩形下边缘的y坐标</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 判断点是否在矩形区域内</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">AABBPointInside</span><span class=\"params\">(<span class=\"type\">const</span> Point_F&amp; V, <span class=\"type\">const</span> RECT&amp; RECT)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (V.x &gt; RECT.left &amp;&amp; V.x &lt; RECT.right &amp;&amp; V.y &gt; RECT.top &amp;&amp; V.y &lt; RECT.bottom);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 判断一个矩形是否完全在另一个矩形内部</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">AABBRectInside</span><span class=\"params\">(<span class=\"type\">const</span> RECT&amp; rect1, <span class=\"type\">const</span> RECT&amp; rect2)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (rect2.left &gt;= rect1.left &amp;&amp; rect2.right &lt;= rect1.right &amp;&amp; rect2.top &gt;= rect1.top &amp;&amp; rect2.bottom &lt;= rect1.bottom);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 判断两个矩形是否重叠</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">AABBRectOverlap</span><span class=\"params\">(<span class=\"type\">const</span> RECT&amp; rect1, <span class=\"type\">const</span> RECT&amp; rect2)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (rect1.right &lt; rect2.left || rect1.left &gt; rect2.right || rect1.bottom &lt; rect2.top || rect1.top &gt; rect2.bottom) ? <span class=\"literal\">false</span> : <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 判断矩形与圆形是否重叠，考虑矩形旋转的情况</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">AABBRectCircleOverlap</span><span class=\"params\">(<span class=\"type\">double</span> rectCenterX, <span class=\"type\">double</span> rectCenterY, <span class=\"type\">double</span> rectWidth, <span class=\"type\">double</span> rectHeight, <span class=\"type\">double</span> angle, <span class=\"type\">double</span> circleX, <span class=\"type\">double</span> circleY, <span class=\"type\">double</span> circleRadius)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 计算旋转后的向量坐标</span></span><br><span class=\"line\">    <span class=\"type\">double</span> vectorX = circleX - rectCenterX;</span><br><span class=\"line\">    <span class=\"type\">double</span> vectorY = circleY - rectCenterY;</span><br><span class=\"line\">    <span class=\"type\">double</span> radians = angle * M_PI / <span class=\"number\">180.0</span>;</span><br><span class=\"line\">    <span class=\"type\">double</span> x = vectorX * <span class=\"built_in\">cos</span>(radians) + vectorY * <span class=\"built_in\">sin</span>(radians);</span><br><span class=\"line\">    <span class=\"type\">double</span> y = vectorY * <span class=\"built_in\">cos</span>(radians) - vectorX * <span class=\"built_in\">sin</span>(radians);</span><br><span class=\"line\">    <span class=\"comment\">// 计算矩形的半宽和半高</span></span><br><span class=\"line\">    <span class=\"type\">double</span> halfWidth = rectWidth * <span class=\"number\">0.5</span>;</span><br><span class=\"line\">    <span class=\"type\">double</span> halfHeight = rectHeight * <span class=\"number\">0.5</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x - circleRadius &lt; halfWidth &amp;&amp; x + circleRadius &gt; -halfWidth) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (y - circleRadius &lt; halfHeight &amp;&amp; y + circleRadius &gt; -halfHeight) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (x &lt; -halfWidth &amp;&amp; y &lt; -halfHeight)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"built_in\">distance</span>(x, y, -halfWidth, -halfHeight) &gt;= circleRadius) &#123; <span class=\"keyword\">return</span> <span class=\"literal\">true</span>; &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (x &lt; halfWidth &amp;&amp; y &lt; -halfHeight)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"built_in\">distance</span>(x, y, halfWidth, -halfHeight) &gt;= circleRadius) &#123; <span class=\"keyword\">return</span> <span class=\"literal\">true</span>; &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (x &gt; halfWidth &amp;&amp; y &gt; halfHeight)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"built_in\">distance</span>(x, y, halfWidth, halfHeight) &gt;= circleRadius) &#123; <span class=\"keyword\">return</span> <span class=\"literal\">true</span>; &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (x &lt; -halfWidth &amp;&amp; y &gt; halfHeight) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"built_in\">distance</span>(x, y, -halfWidth, halfHeight) &gt;= circleRadius) &#123; <span class=\"keyword\">return</span> <span class=\"literal\">true</span>; &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 判断点是否在圆内</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">AABBPointInCircle</span><span class=\"params\">(<span class=\"type\">double</span> pointX, <span class=\"type\">double</span> pointY, <span class=\"type\">double</span> circleCenterX, <span class=\"type\">double</span> circleCenterY, <span class=\"type\">double</span> circleRadius)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 计算点到圆心的距离，判断是否小于等于半径</span></span><br><span class=\"line\">    <span class=\"type\">double</span> dx = pointX - circleCenterX;</span><br><span class=\"line\">    <span class=\"type\">double</span> dy = pointY - circleCenterY;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">sqrt</span>(dx * dx + dy * dy) &lt;= circleRadius;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 判断两个圆是否相交</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">AABBCirclesIntersect</span><span class=\"params\">(<span class=\"type\">double</span> circleCenterX1, <span class=\"type\">double</span> circleCenterY1, <span class=\"type\">double</span> circleRadius1, <span class=\"type\">double</span> circleCenterX2, <span class=\"type\">double</span> circleCenterY2, <span class=\"type\">double</span> circleRadius2)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 计算两个圆心之间的距离，判断是否小于等于两个圆的半径之和</span></span><br><span class=\"line\">    <span class=\"type\">double</span> dx = circleCenterX1 - circleCenterX2;</span><br><span class=\"line\">    <span class=\"type\">double</span> dy = circleCenterY1 - circleCenterY2;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">sqrt</span>(dx * dx + dy * dy) &lt;= circleRadius1 + circleRadius2;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 判断点是否在圆环内</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">AABBPointInAnnulus</span><span class=\"params\">(<span class=\"type\">double</span> x, <span class=\"type\">double</span> y, <span class=\"type\">double</span> circleCenterX, <span class=\"type\">double</span> circleCenterY, <span class=\"type\">double</span> circleRadius, <span class=\"type\">double</span> innerThickness, <span class=\"type\">double</span> outerThickness)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 计算点到圆心的距离</span></span><br><span class=\"line\">    <span class=\"type\">double</span> dx = x - circleCenterX;</span><br><span class=\"line\">    <span class=\"type\">double</span> dy = y - circleCenterY;</span><br><span class=\"line\">    <span class=\"type\">double</span> dist = <span class=\"built_in\">sqrt</span>(dx * dx + dy * dy);</span><br><span class=\"line\">    <span class=\"comment\">// 判断距离是否在内圆半径和外圆半径之间</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (dist &lt;= circleRadius + outerThickness &amp;&amp; dist &gt;= circleRadius - innerThickness);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 判断点是否在椭圆内</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">AABBPointInEllipse</span><span class=\"params\">(<span class=\"type\">double</span> centerX, <span class=\"type\">double</span> centerY, <span class=\"type\">double</span> radiusA, <span class=\"type\">double</span> radiusB, <span class=\"type\">double</span> x, <span class=\"type\">double</span> y)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 计算点到椭圆中心的距离，并与椭圆的参数化方程比较</span></span><br><span class=\"line\">    <span class=\"type\">double</span> dx = centerX - x;</span><br><span class=\"line\">    <span class=\"type\">double</span> dy = centerY - y;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (dx * dx / (radiusA * radiusA) + dy * dy / (radiusB * radiusB)) &lt;= <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","text":"听说有群友已经不满足于，大V老师提供的简单检测方法了，那么让我们为自己的游戏增加更多有趣的碰撞检测罢！全文采用AABB实现，包含矩矩，圆圆，矩圆，角度矩圆，椭圆...","permalink":"/post/一些包围盒类碰撞检测算法","photos":[],"count_time":{"symbolsCount":"4.3k","symbolsTime":"4 mins."},"categories":[{"name":"QiNuoTu","slug":"QiNuoTu","count":5,"path":"api/categories/QiNuoTu.json"}],"tags":[{"name":"游戏开发","slug":"游戏开发","count":3,"path":"api/tags/游戏开发.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%9C%A8%E4%B8%8B%E6%96%87%E4%B8%AD%EF%BC%8C%E5%A4%A7%E5%AE%B6%E5%8F%AF%E8%83%BD%E4%BC%9A%E5%8F%91%E7%8E%B0%EF%BC%8C%E4%B8%BA%E4%BB%80%E4%B9%88%E6%B2%A1%E6%9C%89%E6%97%8B%E8%BD%AC%E8%BF%87%E7%9A%84%E4%B8%A4%E4%B8%AA%E7%9F%A9%E5%BD%A2%E7%9A%84%E7%A2%B0%E6%92%9E%EF%BC%8C%E9%82%A3%E4%B8%8D%E6%98%AFAABB%E4%BA%86%EF%BC%8C%E6%9C%AA%E6%9D%A5%E5%9C%A8%E8%AF%B4%E3%80%82\"><span class=\"toc-text\">在下文中，大家可能会发现，为什么没有旋转过的两个矩形的碰撞，那不是AABB了，未来在说。</span></a></li></ol>","author":{"name":"琪诺兔","slug":"blog-author","avatar":"/img/ChinoRabitHead.jpg","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"标题(●'◡'●)","uid":"6bc822e0f49eccf7b6d7545c6cf5dedf","slug":"Demo","date":"2024-05-27T16:00:00.000Z","updated":"2024-05-27T16:00:00.000Z","comments":true,"path":"api/articles/Demo.json","keywords":null,"cover":[],"text":"这是一个食用的内容，我能不能引用别人的图啊。 试图实验函数12initiali(float A, float B, bool E = 0, int F = 0)...","permalink":"/post/Demo","photos":[],"count_time":{"symbolsCount":117,"symbolsTime":"1 mins."},"categories":[{"name":"QiNuoTu","slug":"QiNuoTu","count":5,"path":"api/categories/QiNuoTu.json"}],"tags":[{"name":"灌水","slug":"灌水","count":1,"path":"api/tags/灌水.json"}],"author":{"name":"琪诺兔","slug":"blog-author","avatar":"/img/ChinoRabitHead.jpg","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{}}